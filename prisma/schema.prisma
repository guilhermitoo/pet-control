// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  tutores       Tutor[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Novos modelos para o sistema de PetShop

enum Sexo {
  MACHO
  FEMEA
}

model Tutor {
  id           String       @id @default(cuid())
  nome         String
  email        String?
  telefone     String
  cep          String?
  rua          String?
  numero       String?
  bairro       String?
  cidade       String?
  estado       String?
  complemento  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  petsTutores  PetTutor[]
}

model Pet {
  id              String       @id @default(cuid())
  nome            String
  foto            String?
  dataNascimento  DateTime?
  raca            String?
  peso            Float?
  sexo            Sexo?
  alergias        String?
  observacoes     String?
  usaTaxiDog      Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  tutores         PetTutor[]
}

model PetTutor {
  id         String   @id @default(cuid())
  petId      String
  tutorId    String
  isPrimario Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pet        Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  tutor      Tutor    @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  @@unique([petId, tutorId])
}

// Enum para tipo de precificação
enum TipoPrecificacao {
  PESO
  RACA
  AMBOS
}

// Modelo de Serviço
model Servico {
  id              String            @id @default(cuid())
  nome            String
  observacoes     String?
  tipoPrecificacao TipoPrecificacao
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  precosPorPeso   PrecoPorPeso[]
  precosPorRaca   PrecoPorRaca[]
}

// Tabela de preços por faixa de peso
model PrecoPorPeso {
  id         String   @id @default(cuid())
  servicoId  String
  servico    Servico  @relation(fields: [servicoId], references: [id], onDelete: Cascade)
  pesoInicial Float
  pesoFinal   Float
  preco       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([servicoId, pesoInicial, pesoFinal])
}

// Tabela de preços por raça
model PrecoPorRaca {
  id         String   @id @default(cuid())
  servicoId  String
  servico    Servico  @relation(fields: [servicoId], references: [id], onDelete: Cascade)
  raca       String
  preco      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([servicoId, raca])
}