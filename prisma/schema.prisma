// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  tutores       Tutor[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Novos modelos para o sistema de PetShop

enum Sexo {
  MACHO
  FEMEA
}

model Tutor {
  id          String     @id @default(cuid())
  nome        String
  email       String?
  telefone    String
  cep         String?
  rua         String?
  numero      String?
  bairro      String?
  cidade      String?
  estado      String?
  complemento String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  petsTutores PetTutor[]
}

model Pet {
  id             String        @id @default(cuid())
  nome           String
  foto           String?
  dataNascimento DateTime?
  raca           String?
  peso           Float?
  sexo           Sexo?
  alergias       String?
  observacoes    String?
  usaTaxiDog     Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  tutores        PetTutor[]
  Agendamento    Agendamento[]
}

model PetTutor {
  id         String   @id @default(cuid())
  petId      String
  tutorId    String
  isPrimario Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pet        Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  tutor      Tutor    @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  @@unique([petId, tutorId])
}

// Enum para tipo de precificação
enum TipoPrecificacao {
  PESO
  RACA
  AMBOS
}

// Relacionar ao modelo Servico existente
model Servico {
  id           String               @id @default(cuid())
  nome         String
  observacoes  String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  precos       Preco[]
  agendamentos AgendamentoServico[]
}

// Novo modelo de Preço
model Preco {
  id        String   @id @default(cuid())
  servicoId String
  raca      String? // Opcional
  peso      Int? // Opcional
  preco     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  servico   Servico  @relation(fields: [servicoId], references: [id], onDelete: Cascade)

  @@unique([servicoId, raca, peso]) // Garante que não haja duplicatas
}

// Enum para status do agendamento
enum StatusAgendamento {
  AGENDADO
  EM_ANDAMENTO
  CONCLUIDO
  CANCELADO
}

// Enum para status do pagamento
enum StatusPagamento {
  PENDENTE
  PAGO
}

// Enum para método de pagamento
enum MetodoPagamento {
  DINHEIRO
  CARTAO_CREDITO
  CARTAO_DEBITO
  PIX
  TRANSFERENCIA
}

// Remover o enum Transporte e adicionar os novos enums
enum TransporteEntrada {
  DONO_TRAZ
  TAXI_DOG
}

enum TransporteSaida {
  DONO_BUSCA
  TAXI_DOG
}

// Atualizar o modelo Agendamento
model Agendamento {
  id                 String             @id @default(cuid())
  petId              String
  pet                Pet                @relation(fields: [petId], references: [id])
  data               DateTime
  horaInicio         DateTime
  horaFim            DateTime?
  observacoes        String?
  status             StatusAgendamento  @default(AGENDADO)
  statusPagamento    StatusPagamento    @default(PENDENTE)
  metodoPagamento    MetodoPagamento?
  valorTotal         Float
  transporteEntrada  TransporteEntrada  @default(DONO_TRAZ)
  transporteSaida    TransporteSaida    @default(DONO_BUSCA)
  enviarNotificacao  Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  servicos           AgendamentoServico[]
  checklist          Checklist?
}

// Relacionamento entre Agendamento e Serviço
model AgendamentoServico {
  id            String      @id @default(cuid())
  agendamentoId String
  servicoId     String
  preco         Float
  agendamento   Agendamento @relation(fields: [agendamentoId], references: [id], onDelete: Cascade)
  servico       Servico     @relation(fields: [servicoId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([agendamentoId, servicoId])
}

// Modelo de Checklist para finalização de serviço
model Checklist {
  id              String      @id @default(cuid())
  agendamentoId   String      @unique
  agendamento     Agendamento @relation(fields: [agendamentoId], references: [id], onDelete: Cascade)
  temCarrapatos   Boolean     @default(false)
  temPulgas       Boolean     @default(false)
  problemaPele    Boolean     @default(false)
  problemaDentes  Boolean     @default(false)
  outrosProblemas String?
  observacoes     String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}